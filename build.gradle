plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
}
tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}
version = '1.1.5-1.20.1'
group = 'iss_magicfromtheeast'
repositories {
    maven { url 'https://libraries.minecraft.net/' } // Mojangのライブラリ
    maven { url 'https://piston-data.mojang.com/' } // Mojangのデータ
    maven { url 'https://www.cursemaven.com' } // CurseForgeのMaven
    maven { url 'https://maven.blamejared.com/' } // 特定Modのリポジトリだが、Forgeなども含むことがある
    mavenCentral()
    maven { url 'https://maven.minecraftforge.net/' } // Forgeの主要リポジトリ
    mavenCentral()

    // 以下にあなたが追加したリポジトリを追加していく
    maven { url "https://jitpack.io" } // Player Animation Lib, Blockbench-Model-Util
    maven { name "Redspace"; url "https://maven.redspace.io/releases" } // Irons Spellbooks
    maven { url "https://www.cursemaven.com" }
    maven {
        url "https://www.cursemaven.com" // JEI, GeckoLib
        content {
            includeGroup "mezz.jei"
            includeGroup "software.bernie.geckolib"
            // その他、CurseMavenでホストされているModのグループID
        }
    }
}
base {
    archivesName = 'iss_magicfromtheeast'
}

// Mojang ships Java 21 to end users starting in 1.20.5, so mods should target Java 21.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    sourceCompatibility = '17'
    targetCompatibility = '17'
}
minecraft {
    mappings channel: 'parchment', version: '2023.9.03-1.20.1'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    // The 'runs' block for client and server configurations

    // !!!ここから runs ブロックを内側に移動!!!
    runs {
        client {
            workingDirectory project.file('run')

            // recommended jvm arguments:
            jvmArg "-Dforge.env=client"
            jvmArg "-Dforge.logging.markers=SCAN,REGISTRIES,FORGEMOD"
            jvmArg "-Dforge.logging.consoleLevel=debug"
            jvmArg "-Djava.net.preferIPv4Stack=true" // For the debug environment

            mods {
                iss_magicfromtheeast {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            jvmArg "-Dforge.env=server"
            jvmArg "-Dforge.logging.markers=SCAN,REGISTRIES,FORGEMOD"
            jvmArg "-Dforge.logging.consoleLevel=debug"
            jvmArg "-Djava.net.preferIPv4Stack=true" // For the debug environment

            mods {
                iss_magicfromtheeast {
                    source sourceSets.main
                }
            }
        }
    } // !!! runs ブロックの閉じ括弧 !!!

} // !!! minecraft ブロックの閉じ括弧 !!!

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    // MinecraftForge本体の依存関係
    // 通常、ForgeGradleは `minecraft { version = ... }` に基づいて
    // これを自動的に追加するため、明示的な `implementation fg.deobf(...)` は不要な場合があります。
    // しかし、明示的に追加することで、依存関係解決の確実性を高めることができます。
    // もし `minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"` で問題なければ、
    // こちらの `implementation` 行は削除しても良いかもしれません。
    // 今回は安全のため両方残しますが、MDKの一般的な形は `minecraft "..."` のみです。
    // MDKの`build.gradle`を確認し、Forge本体をどのように指定しているか確認するとより正確です。
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"
    // 上記の `minecraft "..."` を使う場合、この下の行は不要な可能性が高いです。
    // もしコンパイルエラーが出たら、以下の行は削除してみてください。
    implementation fg.deobf("net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}")


    // Curios API
    // `project.curios_version` のように gradle.properties からバージョンを参照することを推奨
    implementation fg.deobf("top.theillusivec4.curios:curios-forge:${project.minecraft_version}-5.4.1.0") // バージョンを gradle.properties に置く場合は `${project.curios_version}`

    // Player Animation Lib
    // `project.player_anim_version` のように gradle.properties からバージョンを参照することを推奨
    // マッピング済みバージョンは通常、そのまま記述
    implementation fg.deobf("dev.kosmx.player-anim:player-animation-lib-forge:${project.player_animator_version}")

    // Irons Spellbooks
    // `project.irons_spellbooks_version` のように gradle.properties からバージョンを参照することを推奨
    implementation fg.deobf("io.redspace:irons_spellbooks:${project.minecraft_version}-3.4.1_mapped_official_${project.minecraft_version}") // バージョンを gradle.properties に置く場合は `${project.irons_spellbooks_version}`

    // JEI (Just Enough Items)
    // `project.jei_version` のように gradle.properties からバージョンを参照することを推奨
    implementation fg.deobf("mezz.jei:jei-${project.minecraft_version}-forge:15.3.0.4_mapped_official_${project.minecraft_version}") // バージョンを gradle.properties に置く場合は `${project.jei_version}`

    // GeckoLib
    // `project.geckolib_version` のように gradle.properties からバージョンを参照することを推奨
    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-${project.minecraft_version}:${project.geckolib_version}")
    // gradle.propertiesに geckolib_version=6.2.0 を追加してください

    // Blockbench-Model-Util (JitPack)
    // JitPackの依存関係は少し特殊なので、MDKの `build.gradle` でどう記述されているか確認推奨
    // 通常は fg.deobf() は不要な場合があります。
    // もし MDK で fg.deobf() なしで記述されているなら、それに合わせてください。
    implementation "com.github.camadeusa:Blockbench-Model-Util:forge-${project.minecraft_version}-1.0.1" // fg.deobf() なしで試す
    // gradle.propertiesに blockbench_model_util_version=forge-1.20.1-1.0.1 を追加してください
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            loader_version_range   : loader_version_range,
            curios_version         : curios_version,
            geckolib_version       : geckolib_version,
            playeranimlib_version  : playeranimlib_version,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_version            : mod_version,
            mod_license            : mod_license,
            mod_authors            : mod_authors,
            mod_credits            : mod_credits,
            mod_contributors       : mod_contributors,
            mod_description        : mod_description,
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}
// Include the output of "generateModMetadata" as an input directory for the build
// this works with both building through Gradle and the IDE.
sourceSets.main.resources.srcDir generateModMetadata
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
//neoForge.ideSyncTask generateModMetadata

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation

    // Java 8をターゲットにしているエラーを解決するために以下を追加/変更
    sourceCompatibility = '17'
    targetCompatibility = '17'

    // Java 8のtools.jarが見つからないエラーを解決するために以下を追加/確認
    options.fork = true
    options.forkOptions.javaHome = file('C:/Program Files/Eclipse Adoptium/jdk-17.0.10.7-hotspot') // ★あなたの正確なJava 17パスに！★
}

// ideaブロックはtasks.withType(JavaCompile)を含まないようにする
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
    // ここにはtasks.withType(JavaCompile)ブロックはもう存在しない
}
// ModのJar署名タスクを無効にする（署名しない場合）
// Keystore file "user_id.jks" が見つからないエラーの対策
tasks.named('signJar', SignJar) {
    enabled = false
}
java {
    // Java 9以降では tools.jar は存在しないため、
    // 明示的にJavaランタイムモジュールを使用するように設定します。
    // ForgeGradleは通常これを自動で検知しますが、
    // 強制的に設定することで tools.jar エラーを回避できます。
    toolchain {
        languageVersion = JavaLanguageVersion.of(17) // あなたのJDKバージョン (Java 17) を指定
    }
}
