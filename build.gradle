plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '7.0.12'
}
tasks.named('wrapper', Wrapper).configure {
    // Define wrapper values here so as to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.BIN
    options.fork = true
    options.forkOptions.javaHome = file('C:/Program Files/Eclipse Adoptium/jdk-17.0.10.7-hotspot')
}
version = '1.1.5-1.20.1'
group = 'iss_magicfromtheeast'
repositories {
    mavenCentral()
    maven { url 'https://maven.minecraftforge.net/' } // Forgeの主要リポジトリ
    mavenCentral()

    // 以下にあなたが追加したリポジトリを追加していく
    maven { url "https://jitpack.io" } // Player Animation Lib, Blockbench-Model-Util
    maven { name "Redspace"; url "https://maven.redspace.io/releases" } // Irons Spellbooks
    maven { url "https://www.cursemaven.com" }
    maven {
        url "https://www.cursemaven.com" // JEI, GeckoLib
        content {
            includeGroup "mezz.jei"
            includeGroup "software.bernie.geckolib"
            // その他、CurseMavenでホストされているModのグループID
        }
    }
}

base {
    archivesName = 'iss_magicfromtheeast'
}

// Mojang ships Java 21 to end users starting in 1.20.5, so mods should target Java 21.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    sourceCompatibility = '17'
    targetCompatibility = '17'
}

minecraft {
    version = '1.20.1-47.4.0'
    // This is the mapping that your mod uses. It gets compared against the libraries that are provided by the MCP mapping.
    // It should be set to "official" for official mappings or "mcp" for MCP mappings.
    mappings channel: 'parchment', version: '2023.9.03-1.20.1'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    // The 'runs' block for client and server configurations
    runs {
        client {
            workingDirectory project.file('run')

            // recommended jvm arguments:
            jvmArg "-Dforge.env=client"
            jvmArg "-Dforge.logging.markers=SCAN,REGISTRIES,FORGEMOD"
            jvmArg "-Dforge.logging.consoleLevel=debug"
            jvmArg "-Djava.net.preferIPv4Stack=true" // For the debug environment

            mods {
                iss_magicfromtheeast {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            jvmArg "-Dforge.env=server"
            jvmArg "-Dforge.logging.markers=SCAN,REGISTRIES,FORGEMOD"
            jvmArg "-Dforge.logging.consoleLevel=debug"
            jvmArg "-Djava.net.preferIPv4Stack=true" // For the debug environment

            mods {
                iss_magicfromtheeast {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {

    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    // あなたが追加するModの依存関係は以下に記述
    // Curios API
    implementation fg.deobf("top.theillusivec4.curios:curios-forge:1.20.1-5.4.1.0")
    // Player Animation Lib
    implementation(fg.deobf("dev.kosmx.player-anim:player-animation-lib-forge:1.0.2-rc1+1.20.1_mapped_official_1.20.1"))
    // Irons Spellbooks
    implementation(fg.deobf("io.redspace:irons_spellbooks:1.20.1-3.4.1_mapped_official_1.20.1"))
    // JEI
    implementation(fg.deobf("mezz.jei:jei-1.20.1-forge:15.3.0.4_mapped_official_1.20.1"))
    // GeckoLib
    implementation(fg.deobf("software.bernie.geckolib:geckolib-forge-1.20.1:6.2.0"))
    // Blockbench-Model-Util (JitPackの正確なバージョンに修正)
    implementation(fg.deobf("com.github.camadeusa:Blockbench-Model-Util:forge-1.20.1-1.0.1")) // 例
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            loader_version_range   : loader_version_range,
            curios_version         : curios_version,
            geckolib_version       : geckolib_version,
            playeranimlib_version  : playeranimlib_version,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_version            : mod_version,
            mod_license            : mod_license,
            mod_authors            : mod_authors,
            mod_credits            : mod_credits,
            mod_contributors       : mod_contributors,
            mod_description        : mod_description,
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}
// Include the output of "generateModMetadata" as an input directory for the build
// this works with both building through Gradle and the IDE.
sourceSets.main.resources.srcDir generateModMetadata
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
//neoForge.ideSyncTask generateModMetadata

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation

    // Java 8をターゲットにしているエラーを解決するために以下を追加/変更
    sourceCompatibility = '17'
    targetCompatibility = '17'

    // Java 8のtools.jarが見つからないエラーを解決するために以下を追加/確認
    options.fork = true
    options.forkOptions.javaHome = file('C:/Program Files/Eclipse Adoptium/jdk-17.0.10.7-hotspot') // ★あなたの正確なJava 17パスに！★
}

// ideaブロックはtasks.withType(JavaCompile)を含まないようにする
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
    // ここにはtasks.withType(JavaCompile)ブロックはもう存在しない
}
